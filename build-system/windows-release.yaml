# Release task for PbLib projects
# See https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema for reference
trigger:
  branches:
    include:
      - refs/tags/*

variables:
  - name: githubConnectionName
    value: releases
  - name: projectName
    value: lighthouse 
  - name: githubRepositoryName
    value: petabridge/lighthouse 
  - name: dockerConnectionName
    value: PetabridgeDocker

jobs:
  - job: publishNetCore
    pool:
      vmImage: windows-latest
      demands: Cmd
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 6 SDK 6.0.100'
      inputs:
        version: 6.0.100
    - task: BatchScript@1
      displayName: 'dotnet publish'
      inputs:
        filename: build.cmd
        arguments: 'PublishCode'
    - task: CopyFiles@2
      displayName: 'Copy dotnet publish Output'
      inputs:
        sourceFolder: src/Lighthouse/bin/Release/net6.0/publish/
        targetFolder: $(Build.ArtifactStagingDirectory)/bin/Release/net6.0/publish/
    - task: CopyFiles@2
      displayName: 'Copy Dockerfiles'
      inputs:
        sourceFolder: src/Lighthouse
        contents: Dockerfile-*
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: drop
    - task: GitHubRelease@0
      displayName: 'GitHub release (create)'
      inputs:
        gitHubConnection: $(githubConnectionName)
        repositoryName: $(githubRepositoryName)
        title: '$(projectName) v$(Build.SourceBranchName)'
        releaseNotesFile: 'RELEASE_NOTES.md'
        assets: |
         bin\nuget\*.nupkg

  - job:  linuxImageDeploy
    pool:
      vmImage: ubuntu-latest
    dependsOn: publishNetCore
    steps:
      - task: UseDotNet@2
        displayName: 'Use .NET 6 SDK 6.0.100'
        inputs:
          version: 6.0.100
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          downloadPath: '$(Agent.BuildDirectory)'
      - task: CopyFiles@2
        displayName: 'Copy into PWD'
        inputs:
          sourceFolder: $(Agent.BuildDirectory)/drop
          targetFolder: $(Agent.BuildDirectory)
      - script: |
          mv Dockerfile-linux Dockerfile
        displayName: 'Rename Dockerfile-linux to Dockerfile'
        workingDirectory: $(Agent.BuildDirectory)
        failOnStderr: true
        # needed for ARM builds
      - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        displayName: Docker - Register QEMU
        condition: in( variables['Agent.OS'], 'Linux', 'Darwin' )
      - task: Docker@2
        displayName: "Login to Docker Hub"
        inputs:
          command: login
          containerRegistry: $(dockerConnectionName)
      - script: docker buildx create --name akka-arch --use
        displayName: Create Docker buildx Builder
      - script: dotnet --info
        displayName: debug .net
        workingDirectory: $(Agent.BuildDirectory)
      - script: docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --no-cache -t petabridge/lighthouse:latest -t petabridge/lighthouse:linux-latest -t petabridge/lighthouse:$(Build.SourceBranchName) -t petabridge/lighthouse:$(Build.SourceBranchName)-linux --push .
        displayName: Docker Build and Push (multiarch)
        workingDirectory: $(Agent.BuildDirectory)
        continueOnError: true
      - task: Docker@2
        displayName: Logout of Docker Hub
        inputs:
          command: logout
          containerRegistry: $(dockerConnectionName)
      - script: 'echo 1>&2'
        failOnStderr: true
        displayName: 'If above is partially succeeded, then fail'
        condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')

  - job:  windowsImageDeploy
    pool:
      vmImage: windows-latest
    dependsOn: publishNetCore
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'drop'
          itemPattern: drop/**
          downloadPath: '$(Agent.BuildDirectory)'
      - task: Docker@2
        displayName: "Login to Docker Hub"
        inputs:
          command: login
          containerRegistry: $(dockerConnectionName)
      - task: Docker@2
        displayName: Docker Build (Windows)
        inputs:
          command: buildAndPush
          Dockerfile: $(Agent.BuildDirectory)/drop/Dockerfile-windows
          repository: petabridge/lighthouse
          tags: |
            windows-latest
            $(Build.SourceBranchName)-nanoserver
      - task: Docker@2
        displayName: Logout of Docker Hub
        inputs:
          command: logout
          containerRegistry: $(dockerConnectionName)
